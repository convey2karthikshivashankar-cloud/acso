name: ACSO CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PROJECT_NAME: acso
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Code formatting check
      run: |
        black --check src/ config/
        
    - name: Linting
      run: |
        flake8 src/ config/
        
    - name: Type checking
      run: |
        mypy src/ config/
        
    - name: Security scanning
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Run unit tests
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          bandit-report.json
          pytest-report.xml

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push base image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push agent images
      run: |
        agents=("supervisor" "threat-hunter" "incident-response" "service-orchestration" "financial-intelligence")
        
        for agent in "${agents[@]}"; do
          echo "Building ${agent} agent image..."
          
          docker build \
            --target "${agent}-agent" \
            --tag "${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${agent}:${{ github.sha }}" \
            --tag "${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${agent}:latest" \
            .
            
          docker push "${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${agent}:${{ github.sha }}"
          docker push "${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-${agent}:latest"
        done

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        chmod +x scripts/deploy-to-ecs.sh
        ENVIRONMENT=development \
        VERSION=${{ github.sha }} \
        ./scripts/deploy-to-ecs.sh
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Run basic health checks
        python scripts/smoke-tests.py --environment development

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        chmod +x scripts/deploy-to-ecs.sh
        ENVIRONMENT=staging \
        VERSION=${{ github.sha }} \
        ./scripts/deploy-to-ecs.sh
        
    - name: Run integration tests
      run: |
        # Wait for services to be ready
        sleep 120
        
        # Run comprehensive integration tests
        python scripts/integration-tests.py --environment staging

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        chmod +x scripts/deploy-to-ecs.sh
        ENVIRONMENT=production \
        VERSION=${{ github.event.release.tag_name }} \
        ./scripts/deploy-to-ecs.sh
        
    - name: Run production validation
      run: |
        # Wait for services to be ready
        sleep 180
        
        # Run production validation tests
        python scripts/production-validation.py --environment production
        
    - name: Create deployment notification
      if: success()
      run: |
        echo "ACSO ${{ github.event.release.tag_name }} deployed to production successfully"
        
  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine environment for rollback
      id: determine-env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=development" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        fi
        
    - name: Execute rollback
      run: |
        chmod +x scripts/deploy-to-ecs.sh
        ENVIRONMENT=${{ steps.determine-env.outputs.environment }} \
        ./scripts/deploy-to-ecs.sh rollback